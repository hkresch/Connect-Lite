import { CypherASTNode } from "./CypherASTNode";
import { CypherContext } from "./CypherContext";
import { Node } from "./references/Node";
import { Relationship } from "./references/Relationship";
import { Param } from "./references/Param";
export declare type MatchableElement = Node | Relationship;
declare type MatchPatternOptions = {
    labels?: boolean;
    relationshipTypes?: boolean;
};
declare type ParamsRecord = Record<string, Param<any>>;
declare type MatchRelationshipParams = {
    source?: ParamsRecord;
    relationship?: ParamsRecord;
    target?: ParamsRecord;
};
export declare type MatchParams<T extends MatchableElement> = T extends Node ? ParamsRecord : MatchRelationshipParams;
export declare class MatchPattern<T extends MatchableElement> extends CypherASTNode {
    private matchElement;
    private parameters;
    private options;
    constructor(input: T, options?: MatchPatternOptions);
    withParams(parameters: MatchParams<T>): MatchPattern<T>;
    protected cypher(context: CypherContext, childrenCypher: string): string;
    private getRelationshipCypher;
    private getRelationshipArrow;
    private getNodeCypher;
    private serializeParameters;
}
export {};
//# sourceMappingURL=MatchPattern.d.ts.map