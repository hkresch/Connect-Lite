import { CypherContext } from "../CypherContext";
import { MatchableElement, MatchParams } from "../MatchPattern";
import { Node } from "../references/Node";
import { Param } from "../references/Param";
import { Query } from "./Query";
declare type ParamsRecord = Record<string, Param<any>>;
declare type OnCreateRelationshipParameters = {
    source: ParamsRecord;
    target: ParamsRecord;
    relationship: ParamsRecord;
};
export declare class Merge<T extends MatchableElement> extends Query {
    private element;
    private matchPattern;
    private onCreateParameters;
    constructor(element: T, params?: MatchParams<T>, parent?: Query);
    cypher(context: CypherContext, childrenCypher: string): string;
    onCreate(onCreate: T extends Node ? ParamsRecord : Partial<OnCreateRelationshipParameters>): this;
    private mergeOnCreateParamenters;
    private onCreateSetStatement;
}
export {};
//# sourceMappingURL=Merge.d.ts.map