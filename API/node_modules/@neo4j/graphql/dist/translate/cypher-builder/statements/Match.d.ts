import { CypherContext } from "../CypherContext";
import { MatchableElement, MatchParams } from "../MatchPattern";
import { Node } from "../references/Node";
import { Param } from "../references/Param";
import { Query } from "./Query";
declare type Params = Record<string, Param<any>>;
export declare class Match<T extends MatchableElement> extends Query {
    private matchPattern;
    private whereParams;
    constructor(variable: T, parameters?: MatchParams<T>, parent?: Query);
    where(variable: MatchableElement, params: Params): this;
    cypher(context: CypherContext, childrenCypher: string): string;
    return(node: Node, fields?: string[], alias?: string): this;
    and(variable: MatchableElement, params: Params): this;
    private composeWhere;
}
export {};
//# sourceMappingURL=Match.d.ts.map