"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Match = void 0;
const MatchPattern_1 = require("../MatchPattern");
const Param_1 = require("../references/Param");
const Query_1 = require("./Query");
const Return_1 = require("./Return");
class Match extends Query_1.Query {
    // parameters cast required due to neo-push
    // TODO: Remove this cast once neo-push has been fixed
    constructor(variable, parameters = {}, parent) {
        super(parent);
        this.matchPattern = new MatchPattern_1.MatchPattern(variable).withParams(parameters);
        this.whereParams = new Map();
    }
    where(variable, params) {
        const oldParams = this.whereParams.get(variable) || {};
        this.whereParams.set(variable, { ...oldParams, ...params });
        return this;
    }
    cypher(context, childrenCypher) {
        const nodeCypher = this.matchPattern.getCypher(context);
        return `MATCH ${nodeCypher}\n${this.composeWhere(context)}\n${childrenCypher}`;
    }
    return(node, fields, alias) {
        const returnStatement = new Return_1.ReturnStatement(this, [node, fields, alias]);
        this.addStatement(returnStatement);
        return this;
    }
    and(variable, params) {
        return this.where(variable, params);
    }
    composeWhere(context) {
        const whereStatements = [];
        this.whereParams.forEach((params, variable) => {
            const nodeAlias = context.getVariableId(variable);
            const paramsStrs = Object.entries(params).map(([key, value]) => {
                return `${nodeAlias}.${key} = ${value instanceof Param_1.Param ? value.getCypher(context) : value}`;
            });
            whereStatements.push(paramsStrs);
        });
        const whereParams = whereStatements.flat();
        if (whereParams.length === 0)
            return "";
        return `WHERE ${whereParams.join("\nAND ")}`;
    }
}
exports.Match = Match;
//# sourceMappingURL=Match.js.map