"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const neo4j_driver_1 = require("neo4j-driver");
const debug_1 = __importDefault(require("debug"));
const classes_1 = require("../classes");
const constants_1 = require("../constants");
const create_auth_param_1 = __importDefault(require("../translate/create-auth-param"));
const environment_1 = __importDefault(require("../environment"));
const debug = (0, debug_1.default)(constants_1.DEBUG_EXECUTE);
function getSessionParams(input) {
    const sessionParams = { defaultAccessMode: input.defaultAccessMode };
    const driverConfig = input.context.driverConfig;
    if (driverConfig) {
        if (driverConfig.database) {
            sessionParams.database = driverConfig.database;
        }
        if (driverConfig.bookmarks) {
            sessionParams.bookmarks = driverConfig.bookmarks;
        }
    }
    return sessionParams;
}
function getTransactionConfig() {
    const app = `${environment_1.default.NPM_PACKAGE_NAME}@${environment_1.default.NPM_PACKAGE_VERSION}`;
    return {
        metadata: {
            app,
            type: "user-transpiled",
        },
    };
}
function isDriverLike(executionContext) {
    return typeof executionContext.session === "function";
}
function isSessionLike(executionContext) {
    return typeof executionContext.beginTransaction === "function";
}
function getExecutor(input) {
    const executionContext = input.context.executionContext;
    if (isDriverLike(executionContext)) {
        const session = executionContext.session(getSessionParams(input));
        const transaction = session.beginTransaction(getTransactionConfig());
        return { session, transaction, openedTransaction: true, openedSession: true };
    }
    if (isSessionLike(executionContext)) {
        const transaction = executionContext.beginTransaction(getTransactionConfig());
        return { session: executionContext, transaction, openedTransaction: true, openedSession: false };
    }
    return { transaction: executionContext, openedTransaction: false, openedSession: false };
}
async function execute(input) {
    const executor = getExecutor(input);
    // Its really difficult to know when users are using the `auth` param. For Simplicity it better to do the check here
    if (input.cypher.includes("$auth.") ||
        input.cypher.includes("auth: $auth") ||
        input.cypher.includes("auth:$auth")) {
        input.params.auth = (0, create_auth_param_1.default)({ context: input.context });
    }
    const cypher = input.context.queryOptions && Object.keys(input.context.queryOptions).length
        ? `CYPHER ${Object.entries(input.context.queryOptions)
            .map(([key, value]) => `${key}=${value}`)
            .join(" ")}\n${input.cypher}`
        : input.cypher;
    try {
        debug("%s", `About to execute Cypher:\nCypher:\n${cypher}\nParams:\n${JSON.stringify(input.params, null, 2)}`);
        const result = await executor.transaction.run(cypher, input.params);
        if (!result) {
            throw new Error("Unable to execute query against Neo4j database");
        }
        if (executor.openedTransaction) {
            await executor.transaction.commit();
        }
        const records = result.records.map((r) => r.toObject());
        debug(`Execute successful, received ${records.length} records`);
        const bookmark = executor.session ? executor.session.lastBookmark() : null;
        return {
            // Despite being typed as `string | null`, seems to return `string[]`
            bookmark: bookmark && Array.isArray(bookmark) && bookmark[0] ? bookmark[0] : null,
            result,
            statistics: result.summary.counters.updates(),
            records: result.records.map((r) => r.toObject()),
        };
    }
    catch (error) {
        if (error instanceof neo4j_driver_1.Neo4jError) {
            if (error.message.includes(`Caused by: java.lang.RuntimeException: ${constants_1.AUTH_FORBIDDEN_ERROR}`)) {
                throw new classes_1.Neo4jGraphQLForbiddenError("Forbidden");
            }
            if (error.message.includes(`Caused by: java.lang.RuntimeException: ${constants_1.AUTH_UNAUTHENTICATED_ERROR}`)) {
                throw new classes_1.Neo4jGraphQLAuthenticationError("Unauthenticated");
            }
            if (error.message.includes(`Caused by: java.lang.RuntimeException: ${constants_1.RELATIONSHIP_REQUIREMENT_PREFIX}`)) {
                const [, message] = error.message.split(constants_1.RELATIONSHIP_REQUIREMENT_PREFIX);
                throw new classes_1.Neo4jGraphQLRelationshipValidationError(message);
            }
            if (error.code === "Neo.ClientError.Schema.ConstraintValidationFailed") {
                throw new classes_1.Neo4jGraphQLConstraintValidationError("Constraint validation failed");
            }
        }
        debug("%s", error);
        throw error;
    }
    finally {
        if (executor.openedSession && executor.session) {
            await executor.session.close();
        }
    }
}
exports.default = execute;
//# sourceMappingURL=execute.js.map